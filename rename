#!/usr/bin/env perl
#
# Rename files by applying arbitrary Perl expressions.
#
# Example:
#  rename 's/foo/bar/' *
#
# Add a file's MD5 signature to the file name.
#
#  rename 'sub sig{`md5sum $_[0]`=~/\w+/or die;"-$&."} s/\./sig($_)/e;' *.mp3
#

use strict;
use warnings;
use Getopt::Long;
use File::Basename;

my ($THIS) = $0 =~ m%([^/]+)$%;
my $USAGE = <<EOF;
usage: $THIS -l files           (lowercase)
   or: $THIS -c files           (clean - characters that are usually unsafe)
   or: $THIS -u files           (URL encode)
   or: $THIS [-e] perl-expr files
EOF

my @EXPR;
my $COMMAND = "mv";
my $MKDIR;
my $QUIET;
my $DRYRUN;
my $FORCE;
my $DEBUG;

Getopt::Long::config("bundling");
GetOptions
("expression|e=s" => sub { push @EXPR, $_[1] },
 #
 # Use `perl-expr' as the controlling expression.  This option is useful
 # to protect patterns that begin with `-'.  You may specify multiple
 # expressions by preceding each with `-e'.",
 #

 "l" => sub { push @EXPR, '$_ = lc' },
 #
 # Convert to lower case.
 # (Same as: -e '$_=lc')
 #

 "c" => sub { push @EXPR, 'clean()' },
 #
 # Remove all characters that are usually unsafe to have in file names.
 #

 "u" => sub { push @EXPR, 'url_encode()' },
 #
 # URL-encode all characters that are usually unsafe to have in file names.
 #

 "unique|U" => sub { push @EXPR, 'unique()' },
 #
 # Generate a unique name by inserting #123 before the extension.
 #
 #   rename -e 's/foo/bar/' -U foo.txt
 #   rename 's/foo/bar/;unique' foo.txt  # same
 #

 "renumber|renum|r=i" => sub { push @EXPR, '$_ = renumber(' . $_[1] . ', $_)' },
 #
 # Renumber.  Argument is the number of digits to use.
 #

 "by-date" => sub {
     push @EXPR, '$_ = by_date($_)';
     $MKDIR = 1;
 },
 #
 # Move each file into a subdirectory named according to the file's last
 # modifcation time.
 #

 "mkdir|m" => \$MKDIR,
 #
 # When renaming files, make any directories needed for the destination path.
 #

 "p|prefix=s" => sub { push @EXPR, "s/^/$_[1]/" },
 #
 # Same as -e 's/^/prefix/'.
 #

 "quiet|q" => \$QUIET,
 #
 # Be quiet.
 #

 "command|c=s" => \$COMMAND,
 #
 # The command to rename the file.
 #

 "dry-run|n" => \$DRYRUN,
 #
 # Tell what the new file names would be, but don't actually rename any
 # files.
 #

 "force|f" => \$FORCE,
 #
 # If we try to rename A to B but B already exists, delete B first.
 #

 "debug!" => \$DEBUG,
)
or die $USAGE;

my $exit = 0;

$| = 1; # Auto-flush after each print.

unless (@EXPR)
{
    @ARGV or die $USAGE;
    push @EXPR, shift;
}
my $EXPR = join ";\n\t", @EXPR;

# This odd looking "LOOP:" construct is used so "last" will work the way
# you'd expect.  See perlsyn(1), search for "LOOP:".
$EXPR = <<EOF;
LOOP: {
    do {
        $EXPR
    } while 0;
}
EOF

warn "> argc " . @ARGV if $DEBUG;
warn "> argv @ARGV" if $DEBUG;
warn "> expr ==>$EXPR<==" if $DEBUG;

@ARGV or die $USAGE;

sub unique
{
    while (-e)
    {
        # foo#1.txt -> foo#2.txt
        # foo#1     -> foo#2
        next if s/\#(\d+)/"#" . ($1 + 1)/e;

        # foo.bar.txt -> foo.bar#1.txt
        next if s/^(.+)\./$1#1./;

        # foo -> foo#1
        $_ .= "#1";
    }
}

sub url_encode
{
    s/^-/_/;
    s!([^-/\w.])!sprintf "%%%02X", ord $1!eg;
}

my $counter = 0;

sub renumber
{
    my ($digits, $file) = @_;
    $file =~ s/^.*\././;
    return sprintf("%0${digits}d", ++$counter);
}

sub by_date
{
    my ($file) = @_;

    my $mtime = (stat $file)[9];
    unless ($mtime)
    {
        warn "stat $file: $!";
        $exit = 1;
        return $file;
    }
    my ($mday, $mon, $year) = (localtime($mtime))[3, 4, 5];
    return sprintf "%04d-%02d-%02d/%s", $year + 1900, $mon + 1, $mday, $file;
}

sub clean
{
    s%([^-/\w.]+)%-%g;
    s/^-/_/;
}

sub convert_name;

{
    local $^W;
    no strict;
    eval "sub convert_name { $EXPR }";
    $@ && die $@;
}

sub shell_quote
{
    local $_ = shift;
    return $_
        unless m([^@%\w:,./=+-]);
    s/\'/\'\\\'\'/g;
    return "'$_'";
}

my %mkdir;
for (@ARGV)
{
    if (!$DRYRUN && !lstat)
    {
        warn "$THIS: lstat $_: $!\n";
        $exit = 1;
        next;
    }
    my $was = $_;
    convert_name();
    if ($was eq $_)
    {
        warn "> unchanged: $was" if $DEBUG;
        next;
    }
    warn "> new name $_" if $DEBUG;
    if (! $FORCE && lstat)
    {
        warn "$THIS: Will not rename $was to $_: File already exists\n";
        $exit = 1;
        next;
    }

    if ($MKDIR)
    {
        my $dir = dirname $_;
        if (! $mkdir{$dir}++ && ! -d $dir)
        {
            print "mkdir -p $dir\n"
                unless $QUIET;
            unless ($DRYRUN)
            {
                system "mkdir", "-p", $dir;
                $exit = 1
                    if $?;
            }
        }
    }

    print "$COMMAND ", shell_quote($was), " ", shell_quote($_), "\n"
        unless $QUIET;
    unless ($DRYRUN)
    {
        system split(" ", $COMMAND), $was, $_;
        $exit = 1
            if $?;
    }
}
exit $exit;
